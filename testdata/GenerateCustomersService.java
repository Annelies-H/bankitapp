package nl.hva.makeitwork.bankit.bankitapplication.service;

import nl.hva.makeitwork.bankit.bankitapplication.model.ContactDetails;
import nl.hva.makeitwork.bankit.bankitapplication.model.repository.CustomerDAO;
import nl.hva.makeitwork.bankit.bankitapplication.model.user.Customer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

/*
Class used to generate 5000 unique customers based on an input file with user data
The input file is created using the following website: https://nl.fakenamegenerator.com/
Some of the fields in the inputfile need some adjusting before they can be used:
- StreetAddress contains both the streetname (sometimes multiple words) and the houseNr
- Zipcode contains a space (' ') that is removed
- Phone number contains a '-' that is removed
- Surname contains both the lastName and the prefix(es) which are separated
- Gender and CountryFull were initially in english but were changed to dutch in the file
- The NationalID column is empty, therefore the dutch national IDs (BSN) are generated by the application*/





@Service
public class GenerateCustomersService {
    //location of the file:
    static final String FILE_PATH = "documentation/FakeNames.csv";
    //indeces of the different columns containing the required information:
    static final int GENDER_INDEX = 1;
    static final int FIRSTNAME_INDEX = 4;
    static final int MIDDLENAME_INITIAL_INDEX = 5;
    static final int LASTNAME_PREFIX_INDEX = 6;
    static final int STREET_NR_INDEX = 7;
    static final int CITY_INDEX = 8;
    static final int ZIPCODE_INDEX = 9;
    static final int COUNTRY_INDEX = 10;
    static final int EMAIL_INDEX = 11;
    static final int USERNAME_INDEX = 12;
    static final int PASSWORD_INDEX = 13;
    static final int PHONE_INDEX = 14;
    static final int BIRTHDAY_INDEX = 17;
    //locations of the day/month/year in the birthday field
    static final int DAY_INDEX = 1;
    static final int MONTH_INDEX = 0;
    static final int YEAR_INDEX = 2;


    @Autowired
    private CustomerDAO customerDAO;

    public GenerateCustomersService() {super();}


/**
     * Fill the database with customers based on the file from fakenamegenerator.com
     * Dutch nationalIDs (bsn) are generated by the application

*/
    public void createUsers() {
        List<Customer> customers = readFile();
        List<Integer> bsns = createUniqueBSNs(customers.size());
        for (int i = 0; i < customers.size(); i++) {
            Customer customer = customers.get(i);
            customer.setSocialSecurityNumber(bsns.get(i));
            customerDAO.save(customer);
        }
    }

    private List<Customer> readFile() {
        List<Customer> customers = new ArrayList<>();
        File file = new File(FILE_PATH);
        try {
            Scanner scanner = new Scanner(file);
            scanner.nextLine(); //remove the first line containing the headers
            while (scanner.hasNextLine()) {
                String[] row = scanner.nextLine().split(",");
                Customer customer = parseCustomer(row);
                customers.add(customer);
            }
        }
        catch(FileNotFoundException FnF) {
            System.out.println("file not found");
        }
        return customers;
    }

    private Customer parseCustomer(String[] row) {
        ContactDetails contact = parseContactDetails(row);
        Customer customer = new Customer();
        customer.setContactDetails(contact);
        customer.setBirthday(parseBirthday(row[BIRTHDAY_INDEX]));
        customer.setPrefix(parsePrefix(row[LASTNAME_PREFIX_INDEX]));
        customer.setLastName(parseLastName(row[LASTNAME_PREFIX_INDEX]));
        customer.setFirstName(row[FIRSTNAME_INDEX]);
        customer.setGender(row[GENDER_INDEX]);
        customer.setUsername(row[USERNAME_INDEX]);
        customer.setPassword(row[PASSWORD_INDEX]);
        return customer;
    }

    private String parsePrefix(String name) {
        String[] lastNameSplit = name.split(" ");
        String prefix = null;
        if (lastNameSplit.length > 1) {
            prefix = lastNameSplit[0];
            for (int i = 1; i < lastNameSplit.length - 1; i++) {
                prefix = prefix + " " + lastNameSplit[i];
            }
        }
        return prefix;
    }


    private String parseLastName(String name) {
        String[] lastNameSplit = name.split(" ");
        String lastName = lastNameSplit[lastNameSplit.length - 1];
        return lastName;
    }

    private String parseBirthday(String date) {
        String[] birthdaySplit = date.split("/");
        int year = Integer.parseInt(birthdaySplit[YEAR_INDEX]);
        int month = Integer.parseInt(birthdaySplit[MONTH_INDEX]);
        int day = Integer.parseInt(birthdaySplit[DAY_INDEX]);
        return year + "-" + month + "-" + day;
    }

    private ContactDetails parseContactDetails(String[] row) {
        //String phone = row[PHONE_INDEX].replace("-", "");
        ContactDetails contact = new ContactDetails();
        contact.setZipcode(row[ZIPCODE_INDEX].replace(" ", ""));
        contact.setHouseNumber(parseHousNr(row[STREET_NR_INDEX]));
        contact.setEmail(row[EMAIL_INDEX]);
        return contact;
    }

    private int parseHousNr(String streetAndNr) {
        String[] splitStreet = streetAndNr.split(" ");
        int houseNr = Integer.parseInt(splitStreet[splitStreet.length - 1]);
        return houseNr;
    }

    private String parseStreetname(String streetAndNr) {
        String[] splitStreet = streetAndNr.split(" ");
        int houseNr = Integer.parseInt(splitStreet[splitStreet.length - 1]);
        String streetName = splitStreet[0];
        for (int i = 1; i < splitStreet.length - 1; i++) {
            streetName = streetName + " " + splitStreet[i];
        }
        return streetName;
    }


    private List<Integer> createUniqueBSNs(int n) {
        Set<Integer> bsns = new HashSet<>();
        while (bsns.size() < n) {
            bsns.add(createRandomBSN());
        }
        return new ArrayList<>(bsns);
    }

    public int createRandomBSN() {
        Random r = new Random();
        int nr = 1; //any invalid bsn will do
        Customer c = new Customer();
        while (!c.isValidBSN(nr)) {
            //create new random number of the correct length
            nr = r.ints(1, c.BSN_RANGE_MIN_VALUE, c.BSN_RANGE_MAX_VALUE).findFirst().getAsInt();
        }
        return nr;
    }

}
